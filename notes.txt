filter controller içindeki methodlarýmýza gelen requeste müdahale etmemizi saðlar. Önce sonra vs vs.
Buradaki filterda Validationumda bir hata varsa kendi response modelimi dönmemi saðlasýn istiyorum(ApiREsponse). Yoksa fluentValidation otomatik bir response dönüyor.
Controllera gelmeden önce geldikten sonra, return dönmeden önce, return döndükten sonra vs müdahale etmemizi saðlýyor.
Bunlarýn bir üst modeli middlewaredir. Araya intercepter yazabiliyoruz bunda.

Filter API'a özgün bir þey o yüzden service katmanýna yazmam uygun olmaz.

----------------------------------

Uygulamada bir hata fýrlatýldýðýnda geriye kötü bir hata dönüor kendi global exception handler dönemmiz gerek.
HemAPI hem de MVC tarafýnda hazýr bir API var (useExceptionHandler ismi). Bu middleware uygulamada bir hata çýktýðýnda bunu yakalar. Ben bu middlewarei customize edeceðim. 
Api ise Kendi response dto nesnemi döneceðim. 
MVC ise kendi sayfama yönlendireceðim. Error sayfasý.
Bir middleware'e request ilk geldiðinde gider bir de response oluþurken gider.

-----
uygulamada az try cahce kullanmak gerekiyor. Performans tarafonda bir bloklayýcý etkisi var.  -best practise

----------

AutoFac bir inversion of control container olarak geçiyor. Ayný zamanda Dependency Injection Container olarak da geçer.
Normalde ASP.Net Core projesi oluþtruduðumzuda bu framework içinde BUÝLT-In DI Container gelir. Yani program Servicete eklediðimiz AddScopedlar. Herhangi bir classýn ctorunda kullandýðýn interfacei 
ve bu interface'e karþýlýk gelen classlarý ekliyoruz. Default olarak gelen bu container ile ctor injection ve method injection yapabiliyoruz. Yani ya herhangi bir classsýn ctoryunda ya da methodunda interfacei geçebilypruz.

Autofac ise daha geliþmiþ container. Bunun property injectionu da var. Ayný zamamnda burada mesela sonu service ile bitenleri eþleme gibi dinamik yapý da kurabiliriz.Program.cs de daha okunaklý olacak.

--------
Caching iþlemi ekleyeceðim bunu da in memory caching olarak yapacaðým. Bu uygulama nerede host ediliyorsa o hostun memorysini kullanýyorum. 
Cahcing service için artýk productservicewithcaching var. Artýk benim bunu demem lazým DI containera, sen herhangi bir classýn constructorunda I Procu t service görürsen productservicewithcaching classýndan bir 
nesne örneði al demem lazým.

---
api-mvc branchinde web kýsmý api üzerinden  haberleþecek. 